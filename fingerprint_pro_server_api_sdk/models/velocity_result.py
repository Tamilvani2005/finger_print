# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

class VelocityResult(object):
    """
    Sums key data points for a specific `visitorId` at three distinct time intervals: 5 minutes, 1 hour, and 24 hours as follows:  - Number of identification events attributed to the visitor ID - Number of distinct IP addresses associated to the visitor ID. - Number of distinct countries associated with the visitor ID. - Number of distinct `linkedId`s associated with the visitor ID. The `24h` interval of `distinctIp`, `distinctLinkedId`, and `distinctCountry` will be omitted if the number of `events` for the visitor ID in the last 24 hours (`events.intervals.['24h']`) is higher than 20.000. 

    NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distinct_ip': 'VelocityIntervals',
        'distinct_linked_id': 'VelocityIntervals',
        'distinct_country': 'VelocityIntervals',
        'events': 'VelocityIntervals'
    }

    attribute_map = {
        'distinct_ip': 'distinctIp',
        'distinct_linked_id': 'distinctLinkedId',
        'distinct_country': 'distinctCountry',
        'events': 'events'
    }

    def __init__(self, distinct_ip=None, distinct_linked_id=None, distinct_country=None, events=None):  # noqa: E501
        """VelocityResult - a model defined in Swagger"""  # noqa: E501
        self._distinct_ip = None
        self._distinct_linked_id = None
        self._distinct_country = None
        self._events = None
        self.discriminator = None
        self.distinct_ip = distinct_ip
        self.distinct_linked_id = distinct_linked_id
        self.distinct_country = distinct_country
        self.events = events

    @property
    def distinct_ip(self):
        """Gets the distinct_ip of this VelocityResult.  # noqa: E501


        :return: The distinct_ip of this VelocityResult.  # noqa: E501
        :rtype: VelocityIntervals
        """
        return self._distinct_ip

    @distinct_ip.setter
    def distinct_ip(self, distinct_ip):
        """Sets the distinct_ip of this VelocityResult.


        :param distinct_ip: The distinct_ip of this VelocityResult.  # noqa: E501
        :type: VelocityIntervals
        """
        if distinct_ip is None:
            raise ValueError("Invalid value for `distinct_ip`, must not be `None`")  # noqa: E501

        self._distinct_ip = distinct_ip

    @property
    def distinct_linked_id(self):
        """Gets the distinct_linked_id of this VelocityResult.  # noqa: E501


        :return: The distinct_linked_id of this VelocityResult.  # noqa: E501
        :rtype: VelocityIntervals
        """
        return self._distinct_linked_id

    @distinct_linked_id.setter
    def distinct_linked_id(self, distinct_linked_id):
        """Sets the distinct_linked_id of this VelocityResult.


        :param distinct_linked_id: The distinct_linked_id of this VelocityResult.  # noqa: E501
        :type: VelocityIntervals
        """
        if distinct_linked_id is None:
            raise ValueError("Invalid value for `distinct_linked_id`, must not be `None`")  # noqa: E501

        self._distinct_linked_id = distinct_linked_id

    @property
    def distinct_country(self):
        """Gets the distinct_country of this VelocityResult.  # noqa: E501


        :return: The distinct_country of this VelocityResult.  # noqa: E501
        :rtype: VelocityIntervals
        """
        return self._distinct_country

    @distinct_country.setter
    def distinct_country(self, distinct_country):
        """Sets the distinct_country of this VelocityResult.


        :param distinct_country: The distinct_country of this VelocityResult.  # noqa: E501
        :type: VelocityIntervals
        """
        if distinct_country is None:
            raise ValueError("Invalid value for `distinct_country`, must not be `None`")  # noqa: E501

        self._distinct_country = distinct_country

    @property
    def events(self):
        """Gets the events of this VelocityResult.  # noqa: E501


        :return: The events of this VelocityResult.  # noqa: E501
        :rtype: VelocityIntervals
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this VelocityResult.


        :param events: The events of this VelocityResult.  # noqa: E501
        :type: VelocityIntervals
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.swagger_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is None:
                continue
            else:
                result[attr] = value
        if issubclass(VelocityResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VelocityResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VelocityResult):
            return True

        return self.to_dict() != other.to_dict()
