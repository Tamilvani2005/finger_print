# coding: utf-8

"""
    Fingerprint Pro Server API

    Fingerprint Pro Server API allows you to get information about visitors and about individual events in a server environment. It can be used for data exports, decision-making, and data analysis scenarios. Server API is intended for server-side usage, it's not intended to be used from the client side, whether it's a browser or a mobile device.   # noqa: E501

    OpenAPI spec version: 3
    Contact: support@fingerprint.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'linked_id': 'str',
        'tag': 'object',
        'suspect': 'bool'
    }

    attribute_map = {
        'linked_id': 'linkedId',
        'tag': 'tag',
        'suspect': 'suspect'
    }

    def __init__(self, linked_id=None, tag=None, suspect=None):  # noqa: E501
        """EventUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._linked_id = None
        self._tag = None
        self._suspect = None
        self.discriminator = None
        if linked_id is not None:
            self.linked_id = linked_id
        if tag is not None:
            self.tag = tag
        if suspect is not None:
            self.suspect = suspect

    @property
    def linked_id(self):
        """Gets the linked_id of this EventUpdateRequest.  # noqa: E501

        LinkedID value to assign to the existing event  # noqa: E501

        :return: The linked_id of this EventUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._linked_id

    @linked_id.setter
    def linked_id(self, linked_id):
        """Sets the linked_id of this EventUpdateRequest.

        LinkedID value to assign to the existing event  # noqa: E501

        :param linked_id: The linked_id of this EventUpdateRequest.  # noqa: E501
        :type: str
        """

        self._linked_id = linked_id

    @property
    def tag(self):
        """Gets the tag of this EventUpdateRequest.  # noqa: E501

        Full `tag` value to be set to the existing event. Replaces any existing `tag` payload completely.  # noqa: E501

        :return: The tag of this EventUpdateRequest.  # noqa: E501
        :rtype: object
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this EventUpdateRequest.

        Full `tag` value to be set to the existing event. Replaces any existing `tag` payload completely.  # noqa: E501

        :param tag: The tag of this EventUpdateRequest.  # noqa: E501
        :type: object
        """

        self._tag = tag

    @property
    def suspect(self):
        """Gets the suspect of this EventUpdateRequest.  # noqa: E501

        Suspect flag indicating observed suspicious or fraudulent event  # noqa: E501

        :return: The suspect of this EventUpdateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._suspect

    @suspect.setter
    def suspect(self, suspect):
        """Sets the suspect of this EventUpdateRequest.

        Suspect flag indicating observed suspicious or fraudulent event  # noqa: E501

        :param suspect: The suspect of this EventUpdateRequest.  # noqa: E501
        :type: bool
        """

        self._suspect = suspect

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif value is None:
                continue
            else:
                result[attr] = value
        if issubclass(EventUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventUpdateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventUpdateRequest):
            return True

        return self.to_dict() != other.to_dict()
